<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/cache
		http://www.springframework.org/schema/cache/spring-cache.xsd"
	default-lazy-init="true">

	<description>Shiro Configuration</description>

	<!-- <cache:annotation-driven/> -->
	<bean id="chainDefinitionSectionMetaSource"
		class="com.pope.contract.security.ChainDefinitionSectionMetaSource">

		<property name="filterChainDefinitions">
			<value>
				/login.jsp=anon
				/static/** = anon
				/login/welcome=authc
				/login/login=anon
			</value>
		</property>
	</bean>

	<!-- 安全认证过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="unauthorizedUrl" value="/login.jsp" />
		<property name="loginUrl" value="/login.jsp" />
		<property name="successUrl" value="/login/welcome" /> 
		 <property name="filters">
            <map>
                <entry key="perms" value-ref="authorizationFilter"/>
                <entry key="authc" value-ref="authenticationFilter"/>
            </map>
        </property>
		<property name="filterChainDefinitionMap" ref="chainDefinitionSectionMetaSource" />
	</bean>

	<!-- 定义Shiro安全管理配置 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="sessionManager" ref="sessionManager" />
		<!-- <property name="cacheManager" ref="shiroCacheManager" /> -->
		<property name="realm" ref="systemAuthorizingRealm" />
		<!-- 设置authenticator <property name="authenticator" ref="modularRealmAuthenticator"/> -->
	</bean>

	<bean id="systemAuthorizingRealm" class="com.pope.contract.security.SystemAuthorizingRealm">
		<property name="credentialsMatcher" ref="credentialsMatcher"/> 
		<property name="authorizationCacheName" value="shiroAuthorizationCache" />
		<property name="cachingEnabled" value="false"/>
	</bean> 
	 <bean id="credentialsMatcher"
          class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="md5"/>
    </bean>
    <bean id="authorizationFilter" class="com.pope.contract.security.ShiroAuthorizationFilter"/>
    <bean id="authenticationFilter" class="com.pope.contract.security.ShiroAuthenticationFilter"/>
	<!-- 设置modular 默认使用的策略是 只要一个realm验证成功了 那么就算成功 <bean id="modularRealmAuthenticator" 
		class="org.apache.shiro.authc.pam.ModularRealmAuthenticator"> <property name="realms"> 
		<list> <ref bean="systemAuthorizingRealm"/> <ref bean="sysJdbcRealm"/> </list> 
		</property> <property name="authenticationStrategy" ref="allSuccessfulStrategy"/> 
		</bean> jdbcRealm <bean id="sysJdbcRealm" class="com.yonyou.hotusm.module.sys.security.SysJdbcRealm"> 
		<property name="dataSource" ref="dataSource"/> <property name="cacheManager" 
		ref="shiroCacheManager"/> </bean> 修改modularRealmAuthenticator的默认策略 设置在所有的realm认证成功以后 
		才能够算是认证成功 <bean id="allSuccessfulStrategy" class="org.apache.shiro.authc.pam.AllSuccessfulStrategy"/> -->
	<!-- 自定义会话管理配置 -->
	<bean id="sessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<property name="globalSessionTimeout" value="2592000000" />
		<property name="sessionValidationSchedulerEnabled" value="true" />

	</bean>



	<!-- spring对ehcache的缓存工厂支持 -->
	<bean id="ehCacheManagerFactory"  class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:ehcache.xml" />
		<property name="shared" value="true" />
	</bean>

	<!-- spring对ehcache的缓存管理 -->
	 <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="ehCacheManagerFactory"></property>
	</bean> 
	<bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManager" ref="ehCacheManagerFactory"></property>
	</bean>
	

	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- AOP式方法级权限检查 -->
	<!-- <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" 
		depends-on="lifecycleBeanPostProcessor"> <property name="proxyTargetClass" 
		value="true"/> </bean> -->
	<!-- 可以再方法中直接使用 RequiresPermissions.class, RequiresRoles.class, RequiresUser.class, 
		RequiresGuest.class, RequiresAuthentication.class 这几个注解来使用 -->
	<!-- <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"> 
		<property name="securityManager" ref="securityManager"/> </bean> -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
</beans>